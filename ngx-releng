#!/usr/bin/env bash

wiki_file=`perl -e 'print glob "doc/*.wiki"'`
if [ -n "$wiki_file" -a  -f "$wiki_file" ]; then
    wiki2markdown.pl $wiki_file > README.markdown || exit 1
    wiki2pod.pl $wiki_file > /tmp/a.pod || exit 1
    pod2text /tmp/a.pod > README || exit 1
fi

ack '(?<=This document describes ).*-nginx-module v\d+(\.\d\S*)' README

echo =======================================

ack '(?<=\#define)\s*DDEBUG\s*[1-9]' src /dev/null && exit 1
ack '.{81}' src/ngx_*.[ch] /dev/null
ack '(?<!:)//' src/ngx_*.[ch] /dev/null
ack '[ \t]+$' src/ngx_*.[ch] /dev/null
ack '^master_on' t /dev/null
ack 'if \( !|if \(! ' src/ngx_*.[ch] /dev/null
ack '\--- *(?:ONLY|LAST)' t /dev/null
ack -l '\r\n' t /dev/null
ack '\(\);' src/ngx_*.h /dev/null
ack '^static .*?\(\);' src/ngx_*.[ch] /dev/null
ack '^[a-zA-Z]\w+\(\)$' src/ngx_*.[ch] /dev/null

perl -e 'use strict; use warnings;
    for my $fname (@ARGV) {
        my $func;
        open my $in, $fname or die $!;
        while (<$in>) {
            next if /^\s*$/ || m{^\s*/\*};
            if (/^[a-z]\w+\(\S+.*?\) \{$/) {
                print "$fname:$.: \e[33m$_\e[0m";
                undef $func;
                next;
            }

            if (/^[a-z]\w+\(.*?,$/) {
                $func = 1;
                next;
            }

            if ($func && /^ {4}[a-z]\S+.*?,$/) {
                next;
            }

            if ($func && /^ {4}[a-z]\S+.*? \{$/) {
                print "$fname:$.: \e[33m$_\e[0m";
                undef $func;
                next;
            }

            undef $func;
        }
        close $in;
    }' src/ngx_*.[ch]

perl -e 'use strict; use warnings;
    for my $fname (@ARGV) {
        my $seen;
        open my $in, $fname or die $!;
        while (<$in>) {
            next if /^\s*$/ || m{^\s*/\*};
            if (/^ {5,}\S+.*?\)$/) {
                $seen = $_;
                next;
            }
            if ($seen && /^\{$/) {
                my $ln = $. - 1;
                print "$fname:$ln: \e[33m$seen\e[0m";
                undef $seen;
                next;
            }
            undef $seen;
        }
        close $in;
    }' src/ngx_*.[ch]

perl -e 'use strict; use warnings;
    my $seen = 0;
    my $saved;
    my $indent;
    for my $fname (@ARGV) {
        open my $in, $fname or die $!;
        while (<$in>) {
            next if /^\s*$/ || m{^\s*/\*};
            if (/ngx_p[cn]*alloc\b|\b[mc]alloc\b|\bngx_array_push\b|\bngx_array_create\b|\bngx_alloc_chain_link\b|\bngx_c?alloc_buf\b/) {
                my $pattern = $&;
                if (!/return\b.*?$pattern/ && !/"[^"]*$pattern/ && !/^\s+\*/) {
                    if (/^\s+/) {
                        $indent = $&;
                    } else {
                        $indent = "";
                    }
                    $seen = 1;
                    $saved = $_;
                    next;
                }
            }
            if ($seen) {
                if (/^\s+/) {
                    if (length($&) > length($indent)) {
                        next;
                    }
                }
                if (!/\bif\b.*? == NULL/) {
                    warn "not check NULL: $fname: line $.: $saved$_";
                }
            }
            $seen = 0;
        }
        close $in;
    }' src/ngx_*.[ch]

ack '_log_error\(NGX_[^L]' src/ngx_*.[ch] /dev/null

echo done.

